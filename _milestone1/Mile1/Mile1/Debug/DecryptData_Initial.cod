; Listing generated by Microsoft (R) Optimizing Compiler Version 19.15.26732.1 

	TITLE	C:\Users\caleb\OneDrive - University of Texas at San Antonio\Workspace\git\cmp_org_T18-Encryptor-Decryptor-\_milestone1\Mile1\Mile1\DecryptData_Initial.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7C512EE2_ctype@h DB 01H
__5BEBA810_basetsd@h DB 01H
__07523DAF_corecrt_memcpy_s@h DB 01H
__9F081559_corecrt_memory@h DB 01H
__9CE3A74D_corecrt_wstring@h DB 01H
__78F4D6C6_string@h DB 01H
__F7698904_guiddef@h DB 01H
__1D5C983A_winnt@h DB 01H
__4D75C327_processthreadsapi@h DB 01H
__A1C010E7_memoryapi@h DB 01H
__3CD9AC13_winerror@h DB 01H
__7D6EA4B0_winbase@h DB 01H
__1586EFC7_winuser@h DB 01H
__ED00179D_winioctl@h DB 01H
__FE874262_stdlib@h DB 01H
__22D85348_propidl@h DB 01H
__A325E0C4_oleauto@h DB 01H
__49821EBB_stralign@h DB 01H
__320E01E0_corecrt_stdio_config@h DB 01H
__BAC7FC50_corecrt_wstdio@h DB 01H
__A3797CDC_stdio@h DB 01H
__BE076D93_corecrt_wio@h DB 01H
__CEEB45E5_corecrt_io@h DB 01H
__1F774963_decryptdata_initial@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?decryptData@@YAHPADH@Z				; decryptData
PUBLIC	__JustMyCode_Default
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	?gptrKey@@3PAEA:DWORD				; gptrKey
EXTRN	?gptrPasswordHash@@3PAEA:DWORD			; gptrPasswordHash
EXTRN	?gdebug1@@3EA:BYTE				; gdebug1
EXTRN	?gdebug2@@3EA:BYTE				; gdebug2
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\caleb\onedrive - university of texas at san antonio\workspace\git\cmp_org_t18-encryptor-decryptor-\_milestone1\mile1\mile1\decryptdata_initial.cpp
;	COMDAT ?decryptData@@YAHPADH@Z
_TEXT	SEGMENT
_resulti$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_data$ = 8						; size = 4
_dataLength$ = 12					; size = 4
?decryptData@@YAHPADH@Z PROC				; decryptData, COMDAT

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 12   : 	int resulti = 0;

  00028	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _resulti$[ebp], 0

; 13   : 
; 14   : 	gdebug1 = 0;					// a couple of global variables that could be used for debugging

  0002f	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?gdebug1@@3EA, 0 ; gdebug1

; 15   : 	gdebug2 = 0;					// also can have a breakpoint in C code

  00036	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?gdebug2@@3EA, 0 ; gdebug2

; 16   : 
; 17   : 	// You can not declare any local variables in C, but should use resulti to indicate any errors
; 18   : 	// Set up the stack frame and assign variables in assembly if you need to do so
; 19   : 	// access the parameters BEFORE setting up your own stack frame
; 20   : 	// Also, you cannot use a lot of global variables - work with registers
; 21   : 
; 22   : __asm {
; 23   : 			mov esi, gptrPasswordHash	// put address of gPasswordHas into esi

  0003d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gptrPasswordHash@@3PAEA ; gptrPasswordHash

; 24   : 			xor eax, eax				//

  00043	33 c0		 xor	 eax, eax

; 25   : 			mov al, byte ptr[esi]		// store gPassword[0] in al

  00045	8a 06		 mov	 al, BYTE PTR [esi]

; 26   : 			shl ax,8					// shift left 8 times equivalent to multiplying by 256

  00047	66 c1 e0 08	 shl	 ax, 8

; 27   : 			xor ecx,ecx					// set ecx to 0

  0004b	33 c9		 xor	 ecx, ecx

; 28   : 			mov cl, byte ptr[esi + 1]	// set cx to gPassword[1]

  0004d	8a 4e 01	 mov	 cl, BYTE PTR [esi+1]

; 29   : 			add ax, cx					// add gPassword[1] to ax, ax is now starting index for keyfile

  00050	66 03 c1	 add	 ax, cx

; 30   : 										// ax = starting_index = gPasswordHash[0] * 256 + gPasswordHash[1]
; 31   : 
; 32   : 			xor ebx, ebx				// ebx = control variable (loop)

  00053	33 db		 xor	 ebx, ebx

; 33   : 			xor ecx,ecx

  00055	33 c9		 xor	 ecx, ecx

; 34   : 			mov ecx, dataLength			// ecx = length

  00057	8b 4d 0c	 mov	 ecx, DWORD PTR _dataLength$[ebp]

; 35   : 			cmp ecx, 0					// check that length is not <= 0

  0005a	83 f9 00	 cmp	 ecx, 0

; 36   : 			sub ecx, 1					// ecx-- (file length is 1 less than what we had)

  0005d	83 e9 01	 sub	 ecx, 1

; 37   : 			jbe lbl_EXIT_ZERO_LENGTH	//

  00060	76 1b		 jbe	 SHORT $lbl_EXIT_ZERO_LENGTH$3

; 38   : 
; 39   : 			mov edi, data				// put address of first byte of data in edi

  00062	8b 7d 08	 mov	 edi, DWORD PTR _data$[ebp]

; 40   : 			mov esi, gptrKey			// put address of gKey into esi

  00065	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?gptrKey@@3PAEA ; gptrKey
$lbl_LOOP$4:

; 41   : 
; 42   : 			//
; 43   : 			// LOOP THROUGH ENTIRE data[] BYTE BY BYTE
; 44   : 			//
; 45   : lbl_LOOP :
; 46   : 			mov dl, byte ptr[edi + ebx]	//

  0006b	8a 14 1f	 mov	 dl, BYTE PTR [edi+ebx]

; 47   : 			xor dl, byte ptr[esi + eax]	// data[ebx] = data[ebx] ^ keyfile[starting_index]

  0006e	32 14 06	 xor	 dl, BYTE PTR [esi+eax]

; 48   : 			mov byte ptr[edi + ebx], dl	//

  00071	88 14 1f	 mov	 BYTE PTR [edi+ebx], dl

; 49   : 
; 50   : 			add ebx, 1					// ebx++

  00074	83 c3 01	 add	 ebx, 1

; 51   : 			cmp ebx, ecx				// if(ebx > ecx) end loop

  00077	3b d9		 cmp	 ebx, ecx

; 52   : 			ja lbl_EXIT_END				//

  00079	77 07		 ja	 SHORT $lbl_EXIT_END$5

; 53   : 			jmp lbl_LOOP				// else loop

  0007b	eb ee		 jmp	 SHORT $lbl_LOOP$4
$lbl_EXIT_ZERO_LENGTH$3:

; 54   : 
; 55   : lbl_EXIT_ZERO_LENGTH :
; 56   : 			sub ebx, 1		// decrement ebx to -1 to return failure

  0007d	83 eb 01	 sub	 ebx, 1

; 57   : 			jmp lbl_EXIT	//

  00080	eb 02		 jmp	 SHORT $lbl_EXIT$6
$lbl_EXIT_END$5:

; 58   : 
; 59   : lbl_EXIT_END :
; 60   : 			xor ebx, ebx	// ebx = 0, correctly executed

  00082	33 db		 xor	 ebx, ebx
$lbl_EXIT$6:

; 61   : 
; 62   : lbl_EXIT :
; 63   : 			mov resulti, ebx

  00084	89 5d f4	 mov	 DWORD PTR _resulti$[ebp], ebx

; 64   : 	}
; 65   : 
; 66   : 	return resulti;

  00087	8b 45 f4	 mov	 eax, DWORD PTR _resulti$[ebp]

; 67   : } // decryptData

  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
  0008c	5b		 pop	 ebx
  0008d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00090	33 cd		 xor	 ecx, ebp
  00092	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00097	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  0009d	3b ec		 cmp	 ebp, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
?decryptData@@YAHPADH@Z ENDP				; decryptData
_TEXT	ENDS
END
